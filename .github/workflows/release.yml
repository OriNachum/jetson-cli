name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch
        - minor
        - major
permissions:
  contents: write  # Required for creating tags and releases

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        submodules: recursive

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bump2version wheel twine build

    - name: Configure Git
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

    - name: Determine version bump type
      id: version_bump
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          echo "bump_type=${{ github.event.inputs.version_bump }}" >> $GITHUB_OUTPUT
        else
          # Auto-determine based on commit messages
          if git log --format=%B -n 20 | grep -i "breaking\|major"; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
          elif git log --format=%B -n 20 | grep -i "feat\|feature\|minor"; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
          fi
        fi

    - name: Get current version
      id: current_version
      run: |
        echo "version=$(python -c "import jetson_jolt; print(jetson_jolt.__version__)")" >> $GITHUB_OUTPUT

    - name: Bump version
      id: bump_version
      run: |
        bump2version --current-version ${{ steps.current_version.outputs.version }} ${{ steps.version_bump.outputs.bump_type }} jetson_jolt/__init__.py
        NEW_VERSION=$(python -c "import jetson_jolt; print(jetson_jolt.__version__)")
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Update setup.py version (if needed)
      run: |
        # Ensure setup.py uses the same version
        python setup.py check

    - name: Run tests
      run: |
        pip install -e .
        pip install pytest
        pytest tests/ || echo "No tests found, skipping..."

    - name: Build package
      run: |
        python -m build

    - name: Create Release Notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## What's Changed
        
        ### Version ${{ steps.bump_version.outputs.new_version }}
        
        This release includes:
        - Automated version bump (${{ steps.version_bump.outputs.bump_type }})
        - Latest script updates and improvements
        - Bug fixes and enhancements
        
        ### Installation
        ```bash
        pip install jetson-jolt==${{ steps.bump_version.outputs.new_version }}
        ```
        
        ### Usage
        ```bash
        jetson-jolt --help
        jetson-jolt probe
        jetson-jolt init
        jetson-jolt setup
        ```
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ steps.current_version.outputs.version }}...v${{ steps.bump_version.outputs.new_version }}
        EOF

    - name: Create Git Tag
      run: |
        git add -A
        git commit -m "Bump version to ${{ steps.bump_version.outputs.new_version }}" || exit 0
        git tag -a "v${{ steps.bump_version.outputs.new_version }}" -m "Release v${{ steps.bump_version.outputs.new_version }}"
        git push origin main
        git push origin "v${{ steps.bump_version.outputs.new_version }}"

    - name: Create GitHub Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.bump_version.outputs.new_version }}
        release_name: Release v${{ steps.bump_version.outputs.new_version }}
        body_path: release_notes.md
        draft: false
        prerelease: false

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/jetson_jolt-${{ steps.bump_version.outputs.new_version }}-py3-none-any.whl
        asset_name: jetson_jolt-${{ steps.bump_version.outputs.new_version }}-py3-none-any.whl
        asset_content_type: application/zip
